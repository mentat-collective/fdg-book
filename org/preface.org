#+STARTUP: indent

* Preface

Learning physics is hard. Part of the problem is that physics is naturally
expressed in mathematical language. When we teach we use the language of
mathematics in the same way that we use our natural language. We depend upon a
vast amount of shared knowledge and culture, and we only sketch an idea using
mathematical idioms. We are insufficiently precise to convey an idea to a person
who does not share our culture. Our problem is that since we share the culture
we find it difficult to notice that what we say is too imprecise to be clearly
understood by a student new to the subject. A student must simultaneously learn
the mathematical language and the content that is expressed in that language.
This is like trying to read Les Mis´erables while struggling with French
grammar.

This book is an effort to ameliorate this problem for learning the differential
geometry needed as a foundation for a deep understanding of general relativity
or quantum field theory. Our approach differs from the traditional one in
several ways. Our coverage is unusual. We do not prove the general Stokes's
Theorem— this is well covered in many other books—instead, we show how it works
in two dimensions. Because our target is relativity, we put lots of emphasis on
the development of the covariant derivative, and we erect a common context for
understanding both the Lie derivative and the covariant derivative. Most
treatments of differential geometry aimed at relativity assume that there is a
metric (or pseudometric). By contrast, we develop as much material as possible
independent of the assumption of a metric. This allows us to see what results
depend on the metric when we introduce it. We also try to avoid the use of
traditional index notation for tensors. Although one can become very adept at
"index gymnastics," that leads to much mindless (though useful) manipulation
without much thought to meaning. Instead, we use a semantically richer language
of vector fields and differential forms.

But the single biggest difference between our treatment and others is that we
integrate computer programming into our explanations. By programming a computer
to interpret our formulas we soon learn whether or not a formula is correct. If
a formula is not clear, it will not be interpretable. If it is wrong, we will
get a wrong answer. In either case we are led to improve our program and as a
result improve our understanding. We have been teaching advanced classical
mechanics at MIT for many years using this strategy. We use precise functional
notation and we have students program in a functional language. The students
enjoy this approach and we have learned a lot ourselves. It is the experience of
writing software for expressing the mathematical content and the insights that
we gain from doing it that we feel is revolutionary. We want others to have a
similar experience.

** Acknowledgements

We thank the people who helped us develop this material, and especially the
students who have over the years worked through the material with us. In
particular, Mark Tobenkin, William Throwe, Leo Stein, Peter Iannucci, and Micah
Brodsky have suffered through bad explanations and have contributed better ones.
Edmund Bertschinger, Norman Margolus, Tom Knight, Rebecca Frankel, Alexey Radul,
Edwin Taylor, Joel Moses, Kenneth Yip, and Hal Abelson helped us with many
thoughtful discussions and advice about physics and its relation to mathematics.
We also thank Chris Hanson, Taylor Campbell, and the community of Scheme
programmers for providing support and advice for the elegant language that we
use. In particular, Gerald Jay Sussman wants to thank Guy Lewis Steele and
Alexey Radul for many fun days of programming together—we learned much from each
other’s style. Matthew Halfant started us on the development of the Scmutils
system. He encouraged us to get into scientific computation, using Scheme and
functional style as an active way to explain the ideas, without the distractions
of imperative languages such as C. In the 1980s he wrote some of the early
Scheme procedures for numerical computation that we still use. Dan Zuras helped
us with the invention of the unique organization of the Scmutils system. It is
because of his insight that the system is organized around a generic extension
of the chain rule for taking derivatives. He also helped in the heavy lifting
that was required to make a really good polynomial GCD algorithm, based on ideas
we learned from Richard Zippel. A special contribution that cannot be
sufficiently acknowledged is from Seymour Papert and Marvin Minsky, who taught
us that the practice of programming is a powerful way to develop a deeper
understanding of any subject. Indeed, by the act of debugging we learn about our
misconceptions, and by reflecting on our bugs and their resolutions we learn
ways to learn more effectively. Indeed, /Turtle Geometry/ [2], a beautiful book
about discrete differential geometry at a more elementary level, was inspired by
Papert’s work on education. [13]

We acknowledge the generous support of the Computer Science and Artificial
Intelligence Laboratory of the Massachusetts Institute of Technology. The
laboratory provides a stimulating environment for efforts to formalize knowledge
with computational methods. We also acknowledge the Panasonic Corporation
(formerly the Matsushita Electric Industrial Corporation) for support of Gerald
Jay Sussman through an endowed chair.

Jack Wisdom thanks his wife, Cecile, for her love and support. Julie Sussman,
PPA, provided careful reading and serious criticism that inspired us to
reorganize and rewrite major parts of the text. She has also developed and
maintained Gerald Jay Sussman over these many years.

#+begin_center
Gerald Jay Sussman & Jack Wisdom

Cambridge, Massachusetts, USA

August 2012
#+end_center
